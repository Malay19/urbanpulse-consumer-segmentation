version: '3.8'

services:
  # Development environment
  consumer-segmentation-dev:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    container_name: consumer-segmentation-dev
    ports:
      - "8501:8501"  # Streamlit dashboard
      - "8888:8888"  # Jupyter notebook
    volumes:
      - ../:/app
      - ../data:/app/data
      - ../logs:/app/logs
      - ../cache:/app/cache
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - CACHE_ENABLED=true
    networks:
      - consumer-segmentation-network
    restart: unless-stopped

  # Production environment
  consumer-segmentation-prod:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
    container_name: consumer-segmentation-prod
    ports:
      - "80:8501"
    volumes:
      - ../data:/app/data:ro
      - ../logs:/app/logs
      - ../cache:/app/cache
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=WARNING
      - CACHE_ENABLED=true
      - MAX_WORKERS=4
      - MEMORY_LIMIT_MB=4096
    networks:
      - consumer-segmentation-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Testing environment
  consumer-segmentation-test:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: testing
    container_name: consumer-segmentation-test
    volumes:
      - ../:/app
      - ../test-results:/app/test-results
    environment:
      - ENVIRONMENT=testing
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - CACHE_ENABLED=false
    networks:
      - consumer-segmentation-network
    profiles:
      - testing

  # Redis cache (optional)
  redis:
    image: redis:7-alpine
    container_name: consumer-segmentation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - consumer-segmentation-network
    profiles:
      - cache

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: consumer-segmentation-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=consumer_segmentation
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - consumer-segmentation-network
    profiles:
      - database

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: consumer-segmentation-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - consumer-segmentation-prod
    networks:
      - consumer-segmentation-network
    profiles:
      - production

networks:
  consumer-segmentation-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: